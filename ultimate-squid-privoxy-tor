#! /bin/bash
main()
{
	ifs;
	counter;
	paths;
	csv;
	countryCode;
	nodes
}
## Function: ifs()
## Internal Field Separator Command For Heping With Creating Arrays
##
ifs()
{
	SAVEIFS=$IFS
	IFS=$(echo -en "\n\b")
}
paths()
{
	torConfigurationDirectory="/usr/local/etc/tor"
	torDataDirectory="/var/lib"
	torProgramDirectory="/usr/local/bin"

	privoxyConfigurationDirectory="/usr/local/etc/privoxy"
	privoxyLogDirectory="/usr/local/var/log"
	privoxyPidDirectory="/var/run"
	privoxyProgramDirectory="/usr/local/sbin"

	cd /usr/local/etc;
	if [ ! -d squid ]; then
		mkdir squid;
	fi
	squidEtcDirectory="/usr/local/etc/squid"
	squidCacheDirectory="/usr/local/var/cache/squid"
	squidRunDirectory="/usr/local/var/run/squid"
	squidLogDirectory="/usr/local/var/logs/squid"
	squidSbinDirectory="/usr/local/sbin"
}
counter()
{
	counter=1;

	socksPort=9050;
	controlPort=9051;

	privoxyListenPort=8118;

	squidPort=3118;
}
##
## Function: csv()
## Dowloads Lists Of Availabe Tor Servers And Sorts The List By Country From
## Fastest To Slowest.
##
csv()
{
	csvTorStatus()
	{
		useragent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:5.0.1) Gecko/20100101 Firefox/5.0.1"
		URL="http://torstatus.blutmagie.de/query_export.php/Tor_query_EXPORT.csv";
		#torStatus=$(curl --user-agent "$useragent" "$URL");
		torStatus=$(cat /Volumes/Data/Users/administrator/Downloads/Tor_query_EXPORT.csv);
	}
	csvQueries()
	{
		######################################
		## Sort CSV From Fastest To Slowest ##
		######################################
		Fast2Slow(){ sort -r -n -k3,3 -t ,; }
		################################
		## Insert Comma In torcc File ##
		################################
		Comma(){ sed 's/ /,/g'; }
		######################
		## Rows To Columns ##
		######################
		#################
		## Upper Case ##
		#################
		CAPS(){ tr '[:lower:]' '[:upper:]'; }
		######################
		## Columns To Rows ##
		######################
		ColumnToRow() { tr "\n" " " ; }
		##############################
		## Remove "Unnamed" Servers ##
		##############################
		Unnamed(){ sed -e 's/Unnamed//g' -e 's/unnamed//g'; }
		########################
		## Delete Empty Lines ##
		########################
		Empty(){ sed '/^$/d'; }
		#######################
		## Print Top Results ##
		#######################
		ONE(){ sed 1q; }
		FIVE(){ sed 5q; }
		TEN(){ sed 10q; }
		TWENTY(){ sed 20q; }
		THIRTY(){ sed 30q; }
		FORTY(){ sed 40q; }
		FIFTY(){ sed 50q; }
		HUNDRED(){ sed 100q; }
		########################
		## Delete Top Results ##
		########################
		fifty(){ sed '1,50d'; }
		hundred(){ sed '1,50d'; }
	}
	csvTorStatus;
	csvQueries;
}
countryCode()
{
	countryCodeDetails()
	{
		countryCodeDetails=$(cat << EOF
		A1,"Anonymous Proxy"
		A2,"Satellite Provider"
		O1,"Other Country"
		AD,"Andorra"
		AE,"United Arab Emirates"
		AF,"Afghanistan"
		AG,"Antigua and Barbuda"
		AI,"Anguilla"
		AL,"Albania"
		AM,"Armenia"
		AO,"Angola"
		AP,"Asia/Pacific Region"
		AQ,"Antarctica"
		AR,"Argentina"
		AS,"American Samoa"
		AT,"Austria"
		AU,"Australia"
		AW,"Aruba"
		AX,"Aland Islands"
		AZ,"Azerbaijan"
		BA,"Bosnia and Herzegovina"
		BB,"Barbados"
		BD,"Bangladesh"
		BE,"Belgium"
		BF,"Burkina Faso"
		BG,"Bulgaria"
		BH,"Bahrain"
		BI,"Burundi"
		BJ,"Benin"
		BL,"Saint Bartelemey"
		BM,"Bermuda"
		BN,"Brunei Darussalam"
		BO,"Bolivia"
		BQ,"Bonaire, Saint Eustatius and Saba"
		BR,"Brazil"
		BS,"Bahamas"
		BT,"Bhutan"
		BV,"Bouvet Island"
		BW,"Botswana"
		BY,"Belarus"
		BZ,"Belize"
		CA,"Canada"
		CC,"Cocos (Keeling) Islands"
		CD,"Congo, The Democratic Republic of the"
		CF,"Central African Republic"
		CG,"Congo"
		CH,"Switzerland"
		CI,"Cote d'Ivoire"
		CK,"Cook Islands"
		CL,"Chile"
		CM,"Cameroon"
		CN,"China"
		CO,"Colombia"
		CR,"Costa Rica"
		CU,"Cuba"
		CV,"Cape Verde"
		CW,"Curacao"
		CX,"Christmas Island"
		CY,"Cyprus"
		CZ,"Czech Republic"
		DE,"Germany"
		DJ,"Djibouti"
		DK,"Denmark"
		DM,"Dominica"
		DO,"Dominican Republic"
		DZ,"Algeria"
		EC,"Ecuador"
		EE,"Estonia"
		EG,"Egypt"
		EH,"Western Sahara"
		ER,"Eritrea"
		ES,"Spain"
		ET,"Ethiopia"
		EU,"Europe"
		FI,"Finland"
		FJ,"Fiji"
		FK,"Falkland Islands (Malvinas)"
		FM,"Micronesia, Federated States of"
		FO,"Faroe Islands"
		FR,"France"
		GA,"Gabon"
		GB,"United Kingdom"
		GD,"Grenada"
		GE,"Georgia"
		GF,"French Guiana"
		GG,"Guernsey"
		GH,"Ghana"
		GI,"Gibraltar"
		GL,"Greenland"
		GM,"Gambia"
		GN,"Guinea"
		GP,"Guadeloupe"
		GQ,"Equatorial Guinea"
		GR,"Greece"
		GS,"South Georgia and the South Sandwich Islands"
		GT,"Guatemala"
		GU,"Guam"
		GW,"Guinea-Bissau"
		GY,"Guyana"
		HK,"Hong Kong"
		HM,"Heard Island and McDonald Islands"
		HN,"Honduras"
		HR,"Croatia"
		HT,"Haiti"
		HU,"Hungary"
		ID,"Indonesia"
		IE,"Ireland"
		IL,"Israel"
		IM,"Isle of Man"
		IN,"India"
		IO,"British Indian Ocean Territory"
		IQ,"Iraq"
		IR,"Iran, Islamic Republic of"
		IS,"Iceland"
		IT,"Italy"
		JE,"Jersey"
		JM,"Jamaica"
		JO,"Jordan"
		JP,"Japan"
		KE,"Kenya"
		KG,"Kyrgyzstan"
		KH,"Cambodia"
		KI,"Kiribati"
		KM,"Comoros"
		KN,"Saint Kitts and Nevis"
		KP,"Korea, Democratic People's Republic of"
		KR,"Korea, Republic of"
		KW,"Kuwait"
		KY,"Cayman Islands"
		KZ,"Kazakhstan"
		LA,"Lao People's Democratic Republic"
		LB,"Lebanon"
		LC,"Saint Lucia"
		LI,"Liechtenstein"
		LK,"Sri Lanka"
		LR,"Liberia"
		LS,"Lesotho"
		LT,"Lithuania"
		LU,"Luxembourg"
		LV,"Latvia"
		LY,"Libyan Arab Jamahiriya"
		MA,"Morocco"
		MC,"Monaco"
		MD,"Moldova, Republic of"
		ME,"Montenegro"
		MF,"Saint Martin"
		MG,"Madagascar"
		MH,"Marshall Islands"
		MK,"Macedonia"
		ML,"Mali"
		MM,"Myanmar"
		MN,"Mongolia"
		MO,"Macao"
		MP,"Northern Mariana Islands"
		MQ,"Martinique"
		MR,"Mauritania"
		MS,"Montserrat"
		MT,"Malta"
		MU,"Mauritius"
		MV,"Maldives"
		MW,"Malawi"
		MX,"Mexico"
		MY,"Malaysia"
		MZ,"Mozambique"
		NA,"Namibia"
		NC,"New Caledonia"
		NE,"Niger"
		NF,"Norfolk Island"
		NG,"Nigeria"
		NI,"Nicaragua"
		NL,"Netherlands"
		NO,"Norway"
		NP,"Nepal"
		NR,"Nauru"
		NU,"Niue"
		NZ,"New Zealand"
		OM,"Oman"
		PA,"Panama"
		PE,"Peru"
		PF,"French Polynesia"
		PG,"Papua New Guinea"
		PH,"Philippines"
		PK,"Pakistan"
		PL,"Poland"
		PM,"Saint Pierre and Miquelon"
		PN,"Pitcairn"
		PR,"Puerto Rico"
		PS,"Palestinian Territory"
		PT,"Portugal"
		PW,"Palau"
		PY,"Paraguay"
		QA,"Qatar"
		RE,"Reunion"
		RO,"Romania"
		RS,"Serbia"
		RU,"Russian Federation"
		RW,"Rwanda"
		SA,"Saudi Arabia"
		SB,"Solomon Islands"
		SC,"Seychelles"
		SD,"Sudan"
		SE,"Sweden"
		SG,"Singapore"
		SH,"Saint Helena"
		SI,"Slovenia"
		SJ,"Svalbard and Jan Mayen"
		SK,"Slovakia"
		SL,"Sierra Leone"
		SM,"San Marino"
		SN,"Senegal"
		SO,"Somalia"
		SR,"Suriname"
		SS,"South Sudan"
		ST,"Sao Tome and Principe"
		SV,"El Salvador"
		SX,"Sint Maarten"
		SY,"Syrian Arab Republic"
		SZ,"Swaziland"
		TC,"Turks and Caicos Islands"
		TD,"Chad"
		TF,"French Southern Territories"
		TG,"Togo"
		TH,"Thailand"
		TJ,"Tajikistan"
		TK,"Tokelau"
		TL,"Timor-Leste"
		TM,"Turkmenistan"
		TN,"Tunisia"
		TO,"Tonga"
		TR,"Turkey"
		TT,"Trinidad and Tobago"
		TV,"Tuvalu"
		TW,"Taiwan"
		TZ,"Tanzania, United Republic of"
		UA,"Ukraine"
		UG,"Uganda"
		UM,"United States Minor Outlying Islands"
		US,"United States"
		UY,"Uruguay"
		UZ,"Uzbekistan"
		VA,"Holy See (Vatican City State)"
		VC,"Saint Vincent and the Grenadines"
		VE,"Venezuela"
		VG,"Virgin Islands, British"
		VI,"Virgin Islands, U.S."
		VN,"Vietnam"
		VU,"Vanuatu"
		WF,"Wallis and Futuna"
		WS,"Samoa"
		YE,"Yemen"
		YT,"Mayotte"
		ZA,"South Africa"
		ZM,"Zambia"
		ZW,"Zimbabwe"
		EOF)
	}
	countryCodeParameters()
	{
		countryCode=( $(
		echo "$torStatus" \
			| awk -F"," '{print $2}' \
			| sort -k3 \
			| sort -u \
			| sed -e 's/Country Code//g' \
			-e 's_N/A__g' \
			| Empty ) )
		countryCodeName=( $(
		for ((n=0;n<${#countryCode[@]};n++)); do
			echo "$countryCodeDetails" \
				| grep ${countryCode[n]} \
				| cut -f2 -d'"'
		done ) )
	}
	countryCodeMenu()
	{
		for ((n=0;n<${#countryCode[@]};n++)); do
			printf "%s%s\n" "${countryCode[n]}) ""${countryCodeName[n]}"
		done
	}
	countryCodeSelection()
	{
		read -p "PLEASE SELECT THE COUNTRY CODE (CA,GB,US): " REPLY
	}
	countryCodeErrorMessage()
	{
		while [ $invalidINPUT ]; do
			clear;
			echo;
			echo;
			countryCodeMenu | column;
			echo;
			echo;
			echo Invalid Country Code:
			echo $invalidINPUT;
			echo;
			echo;
			countryCodeSelection;
			countryCodeVerification
		done
	}
	countryCodeVerification()
	{
		IFS=","
		invalidINPUT=( $(
		for n in ${REPLY1[@]}; do
			valid=$(
			echo "$torStatus" \
				| awk -F"," '{print $2}' \
				| sort -k3 \
				| sort -u \
				| sed -e 's/Country Code//g' \
				-e 's_N/A__g' \
				| Empty \
				| CAPS \
				| grep $n )
			if [ ! $valid ]; then
				echo $n
			fi
		done ) )
		countryCodeErrorMessage
	}
	countryCodeDetails;
	countryCodeParameters;
	clear;
	echo;
	echo;
	countryCodeMenu | column 2> /dev/null;
	echo;
	echo;
	countryCodeSelection;
	countryCodeVerification #ca,GB,UK,elephant
}
nodes()
{
	nodesInput()
	{
		name=$(
		echo "$countryCodeDetails" \
			| grep $n \
			| cut -f2 -d'"')
		read -p "Please enter the number of exit nodes for $name (1-10): " REPLY2
	}
	nodesErrorMessage()
	{
		while [[ $REPLY2 != [0-9]* ]]; do
			clear;
			echo;
			echo;
			nodesInput;
		done
	}
	nodesParseREPLY()
	{
		REPLY1=( $(
		IFS=",";
		echo "$REPLY" \
			| tr " " "\n" ) )
	}
	nodesParseREPLY
	for n in ${REPLY1[@]}; do
		clear;
		echo;
		echo;
		nodesInput;
		nodesErrorMessage;
		bandWidth;
		torParameters;
		squidConfigurationFile > $squidEtcDirectory/$n.conf
		for ((i=1;i<=$REPLY2;i++)); do
			torrc;
			torStart;
			priVoxy
			squidConfigurationRoundRobin >> $squidEtcDirectory/$n.conf;
			export counter=$(( $counter + 1 ));
			export socksPort=$(( $socksPort + 100 ));
			export controlPort=$(( $controlPort + 100 ));
			export privoxyListenPort=$(( $privoxyListenPort + 100 ));
		done
		export squidPort=$(( $squidPort + 100 ));
		squidConfigurationCache >> $squidEtcDirectory/$n.conf
		squidCreateCacheDirectory;
		#squidBlackList;
		sleep 10
		squidStart;
	done
}
bandWidth()
{
	bandwidthParameters()
	{
		bandwidth=( '56' '128' '256' '512' '768' '1024' '1280' '1536' '1792' '2048' );
	}
	bandwidthMenu()
	{
		for ((n=0;n<${#bandwidth[@]};n++)); do
			printf "%6s%s\n" "${bandwidth[n]}) " "${bandwidth[n]} kbps"
		done
	}
	bandwidthSelection()
	{
		read -p "Please select the minimum bandwidth speed for $n exit nodes: " REPLY3
	}
	bandwidthErrorMessage()
	{
		while [ $invalidINPUT ]; do
			clear;
			echo;
			echo;
			bandwidthMenu | column;
			echo;
			echo;
			echo Invalid Bandwidth Speed:
			echo $invalidINPUT;
			echo;
			echo;
			bandwidthSelection;
			bandwidthVerification
			break
		done
	}
	bandwidthVerification()
	{
		invalidINPUT=$(
		valid=$(
		for n in ${bandwidth[@]}; do
			echo "$n"
		done | grep "$REPLY3" )
		if [ ! $valid ]; then
			echo $REPLY3
		fi)
		bandwidthErrorMessage;
	}
	clear;
	echo;
	echo;
	bandwidthParameters;
	bandwidthMenu | column;
	echo;
	echo;
	bandwidthSelection;
	bandwidthVerification;
}
torParameters()
{
	#####################################
	## Bandwidth Greater Than ??? KB/s ##
	#####################################
	BANDWIDTH(){ awk -F"," -v Bandwidth=$REPLY3 '$3>=Bandwidth'; }
	##################################
	## Bandwidth Less Than ??? KB/s ##
	##################################
	bandwidth(){ awk -F"," -v Bandwidth=$REPLY3 '$3<=Bandwidth'; }
	## List The Entry Nodes That Meet The Bandwidth Requirements
	csvEntryNodes=$(
	echo "$torStatus" \
		| Fast2Slow \
		| HUNDRED \
		| BANDWIDTH \
		| Unnamed \
		| awk -F"," '{print $1}' \
		| Empty \
		| ColumnToRow \
		| Comma \
		| sed 's/,$//g' )
	## List The Exit Nodes That Meet The The Bandwidth Requiredments
	csvExitNodes=$(
	echo "$torStatus" \
		| awk -F"," -v CC=$n '$2==CC' \
		| Fast2Slow \
		| TWENTY \
		| Unnamed \
		| awk -F"," '{print $1}' \
		| Empty \
		| ColumnToRow \
		| Comma \
		| sed 's/,$//g')
	## Blacklist Of All Entry And Exit Nodes That Do Not Meet
	## The Bandwidth Requirements
	csvExcludeNodes=$(
	echo "$torStatus" \
		| awk -F"," -v CC=$n '$2!=CC' \
		| bandwidth \
		| Unnamed \
		| awk -F"," '{print $1}' \
		| Empty \
		| ColumnToRow \
		| Comma \
		| sed 's/,$//g')
}
##
## Function: torrc()
## Creates A Highly Optimized torrc Configuration File Based On The
## Exit Nodes And The Bandwidth Requirements
##
torrc()
{
	torrcEntryNodes()
	{
		echo EntryNodes "$csvEntryNodes"
	}
	torrcExitNodes()
	{
		echo ExitNodes "$csvExitNodes"
	}
	torrcExcludeNodes()
	{
		echo ExcludeNodes "$csvExcludeNodes"
	}
	torrcConfig()
	{
		echo SocksPort $socksPort # what port to open for local application connections
		echo SocksBindAddress 127.0.0.1 # accept connections only from localhost
		echo StrictNodes 1
		echo AllowUnverifiedNodes middle,rendezvous
		echo Log notice syslog
		echo RunAsDaemon 1
		#echo User tor
		#echo Group tor
		echo DataDirectory "$torDataDirectory/tor$counter"
		#echo ControlPort $controlPort
	}
	torrcEntryNodes > "$torConfigurationDirectory/torrc$counter"
	torrcExitNodes >> "$torConfigurationDirectory/torrc$counter"
	torrcExcludeNodes >> "$torConfigurationDirectory/torrc$counter"
	torrcConfig >> "$torConfigurationDirectory/torrc$counter"
}
torStart()
{
	cd $torDataDirectory;
	if [ ! -d tor$counter ]; then
		mkdir tor$counter;
	fi
	$torProgramDirectory/tor -f "$torConfigurationDirectory/torrc$counter" &
}
priVoxy()
{
	privoxyConfigurationFile()
	{
		echo trust-info-url http://www.example.com/why_we_block.html
		echo trust-info-url http://www.example.com/what_we_allow.html
		echo confdir $privoxyConfigurationDirectory
		echo logdir $privoxyLogDirectory/privoxy$counter
		echo actionsfile match-all.action # Internal purpose, recommended
		echo actionsfile default.action # Main actions file
		echo actionsfile user.action # User customizations
		echo filterfile default.filter
		echo logfile logfile
		echo listen-address 127.0.0.1:$privoxyListenPort
		echo toggle 1
		echo enable-remote-toggle 1
		echo enable-remote-http-toggle 1
		echo enable-edit-actions 1
		echo enforce-blocks 0
		echo buffer-limit 4096
		echo forward-socks5 / 127.0.0.1:$socksPort .
		echo forwarded-connect-retries 0
		echo accept-intercepted-requests 0
		echo allow-cgi-request-crunching 0
		echo split-large-forms 0
	}
	privoxyCreateConfigurationDirectory()
	{
		cd $privoxyConfigurationDirectory;
		if [ ! -d configuration ]; then
			sudo mkdir configuration;
		fi
		chown privoxy:privoxy $privoxyConfigurationDirectory/configuration
		cd configuration;
		if [ ! -d config$counter ]; then
			mkdir config$counter;
		fi
		chown privoxy:privoxy $privoxyConfigurationDirectory/configuration/config$counter;
		for l in match-all.action default.action user.action default.filter user.filter; do
			sudo cp $privoxyConfigurationDirectory/$l $privoxyConfigurationDirectory/configuration/config$counter/$l;
			chown privoxy:privoxy $privoxyConfigurationDirectory/configuration/config$counter/$l;
		done
		sudo cp -a $privoxyConfigurationDirectory/templates $privoxyConfigurationDirectory/configuration/config$counter/templates;
	}
	privoxyCreateLogDirectory()
	{
		chown privoxy:privoxy $privoxyLogDirectory
		cd $privoxyLogDirectory;
		## Create Log Directory ##
		if [ ! -d privoxy$counter ]; then
			mkdir privoxy$counter;
		fi
		chown privoxy:privoxy $privoxyLogDirectory/privoxy$counter;
		## Create Missing Logfiles ##
		for l in logfile jarfile; do
			touch $privoxyLogDirectory/privoxy$counter/$l;
			chgrp privoxy $privoxyLogDirectory/privoxy$counter/$l;
			chmod 660 $privoxyLogDirectory/privoxy$counter/$l;
		done;
	}
	privoxyStart()
	{
		#sudo $privoxyProgramDirectory/privoxy --pidfile $privoxyPidDirectory/privoxy$counter.pid --user privoxy $privoxyConfigurationDirectory/configuration/config$counter/config
		sudo $privoxyProgramDirectory/privoxy --pidfile $privoxyPidDirectory/privoxy$counter.pid $privoxyConfigurationDirectory/configuration/config$counter/config
	}
	privoxyCreateConfigurationDirectory;
	privoxyConfigurationFile > $privoxyConfigurationDirectory/configuration/config$counter/config;
	privoxyCreateLogDirectory;
	privoxyStart;
}
squidConfigurationFile()
{
	#echo acl all src all
	#echo acl manager proto cache_object
	#echo acl localhost src 127.0.0.1/32
	#echo acl to_localhost dst 127.0.0.0/8
	#echo 
	echo acl SSL_ports port 443
	echo acl Safe_ports port 80" # http"
	echo acl Safe_ports port 21" # ftp"
	echo acl Safe_ports port 443" # https"
	echo acl Safe_ports port 70" # gopher"
	echo acl Safe_ports port 210" # wais"
	echo acl Safe_ports port 1025-65535" # unregistered ports"
	echo acl Safe_ports port 280" # http-mgmt"
	echo acl Safe_ports port 488" # gss-http"
	echo acl Safe_ports port 591" # filemaker"
	echo acl Safe_ports port 777" # multiling http"
	echo acl Safe_ports port 901" # SWAT"
	echo acl Safe_ports port 1935" # Macromedia Flash x-fcs"
	echo acl purge method PURGE
	echo acl CONNECT method CONNECT
	echo
	echo http_access allow manager localhost
	echo http_access deny manager
	echo http_access allow purge localhost
	echo http_access deny purge
	echo http_access deny" !Safe_ports"
	echo http_access deny CONNECT" !SSL_ports"
	echo
	echo acl malware_domains url_regex $squidEtcDirectory/Malware-domains.txt
	echo http_access deny malware_domains
	echo
	echo acl ad_block url_regex $squidEtcDirectory/ad_block.txt
	echo http_access deny ad_block
	echo
	echo hosts_file /etc/hosts
	#echo http_access allow localhost
	#echo http_access deny all
	#echo icp_access deny all
	echo http_port $squidPort
	echo icp_port 0
	#echo hierarchy_stoplist cgi-bin ?
	echo
	echo refresh_pattern" ^ftp: 1440 20% 10080"
	echo refresh_pattern" ^gopher: 1440 0% 1440"
	echo refresh_pattern" -i (/cgi-bin/|\?) 0 0% 0"
	echo refresh_pattern" -i \.(gif|png|jpg|jpeg|ico)$ 10080 90% 43200 override-expire ignore-no-cache ignore-no-store ignore-private ignore-must-revalidate"
	echo refresh_pattern" -i \.(iso|avi|wav|mp3|mp4|mpeg|swf|flv|x-flv)$ 43200 90% 432000 override-expire ignore-no-cache ignore-no-store ignore-private ignore-must-revalidate"
	echo refresh_pattern" -i \.(deb|rpm|exe|zip|tar|tgz|ram|rar|bin|ppt|doc|tiff)$ 10080 90% 43200 override-expire ignore-no-cache ignore-no-store ignore-private ignore-must-revalidate"
	echo refresh_pattern" -i \.index.(html|htm)$ 0 40% 43200 override-expire ignore-no-cache ignore-no-store ignore-private ignore-must-revalidate"
	echo refresh_pattern" -i \.(html|htm|css|js)$ 1440 40% 43200 override-expire ignore-no-cache ignore-no-store ignore-private ignore-must-revalidate"
	echo refresh_pattern" . 0 40% 40320"
	echo refresh_pattern" . 0 20% 4320"
	echo 
	echo pipeline_prefetch on
	echo cache_mem 6144 MB
	echo
	echo maximum_object_size 144 MB
	echo dns_nameservers 8.8.8.8 8.8.4.4
}
squidConfigurationRoundRobin()
{
	echo cache_peer localhost$counter parent $privoxyListenPort 0 round-robin no-query
}
squidConfigurationCache()
{
	echo never_direct allow all
	echo always_direct deny all
	echo acl apache rep_header Server ^Apache
	echo forwarded_for off
	#echo cache_effective_user root
	echo coredump_dir /usr/local/var/cache/squid/$n
	echo cache_dir aufs /usr/local/var/cache/squid/$n 2000 16 256
	echo pid_filename /usr/local/var/run/squid/$n.pid
	echo access_log $squidLogDirectory/access.$n.log
	echo cache_store_log $squidLogDirectory/store.$n.log
	echo cache_log $squidLogDirectory/cache.$n.log
	echo
	echo visible_hostname localhost
	echo pipeline_prefetch on
	echo
	echo via off
	echo forwarded_for off
	echo
	echo request_header_access Allow allow all
	echo request_header_access Authorization allow all
	echo request_header_access WWW-Authenticate allow all
	echo request_header_access Proxy-Authorization allow all
	echo request_header_access Proxy-Authenticate allow all
	echo request_header_access Cache-Control allow all
	echo request_header_access Content-Encoding allow all
	echo request_header_access Content-Length allow all
	echo request_header_access Content-Type allow all
	echo request_header_access Date allow all
	echo request_header_access Expires allow all
	echo request_header_access Host allow all
	echo request_header_access If-Modified-Since allow all
	echo request_header_access Last-Modified allow all
	echo request_header_access Location allow all
	echo request_header_access Pragma allow all
	echo request_header_access Accept allow all
	echo request_header_access Accept-Charset allow all
	echo request_header_access Accept-Encoding allow all
	echo request_header_access Accept-Language allow all
	echo request_header_access Content-Language allow all
	echo request_header_access Mime-Version allow all
	echo request_header_access Retry-After allow all
	echo request_header_access Title allow all
	echo request_header_access Connection allow all
	echo request_header_access Proxy-Connection allow all
	echo request_header_access User-Agent allow all
	echo request_header_access Cookie allow all
	echo request_header_access All deny all
}
squidCreateCacheDirectory()
{
	cd /usr/local/var/logs
	if [ ! -d squid ]; then
		sudo mkdir squid;
	fi
	sudo chown -R root:nobody $squidLogDirectory/squid
	chmod g+w $squidLogDirectory
	## Change Ownership ##
	cd $squidCacheDirectory;
	if [ ! -d $n ]; then
		sudo mkdir $n;
	fi
	sudo chown -R nobody:nobody $squidCacheDirectory
	sudo chown -R nobody:nobody $squidEtcDirectory/$n
	#sudo chmod -r 777 $squidCacheDirectory/$n
	## Create Cache Directories ##
	sudo $squidSbinDirectory/squid -f $squidEtcDirectory/$n.conf -z;
	## Create Swap Files ##
	sudo $squidSbinDirectory/squid -f -N -d 1 z $squidEtcDirectory/$n.conf;
}
squidBlackList()
{
	cd $squidEtcDirectory
	curl "http://malware.hiperlinks.com.br/cgi/submit?action=list_squid" > Malware-domains.txt;
	curl "http://pgl.yoyo.org/as/serverlist.php?hostformat=squid-dstdom-regex;showintro=0" | tidy -asxml | xpath '//pre/text()' > ad_block.txt;
}
squidStart()
{
	sudo $squidSbinDirectory/squid -f $squidEtcDirectory/$n.conf -N -d 1 &
}
main $@
